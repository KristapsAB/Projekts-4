{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/EVENT-PAGE/noliktava/src/EventPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/EventPage.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faShoppingCart } from '@fortawesome/free-solid-svg-icons';\nimport Nav from './Nav';\nimport EventForm from './EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventPage = ({\n  addToCart\n}) => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState('');\n  const [futureDates, setFutureDates] = useState([]);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [events, setEvents] = useState([]); // State for storing dynamic events\n\n  // Use useEffect to fetch dynamic events when the component mounts\n  useEffect(() => {\n    // Fetch events from your API or database here\n    // Example: fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await fetch('YOUR_API_ENDPOINT_FOR_EVENTS');\n      const data = await response.json();\n      setEvents(data); // Update the events state with fetched data\n    } catch (error) {\n      console.error('Error fetching events:', error.message);\n    }\n  };\n  const handleAddEvent = async eventData => {\n    try {\n      // Make API call to add the new event\n      const response = await fetch('http://localhost:8888/api/eventApi.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(eventData)\n      });\n      const result = await response.json();\n      if (result.success) {\n        console.log('Event added successfully');\n        // Fetch the updated list of events after adding a new event\n        fetchEvents();\n      } else {\n        console.error('Error adding event:', result.message);\n      }\n    } catch (error) {\n      console.error('Error adding event:', error.message);\n    } finally {\n      setIsFormVisible(false); // Close the form after submission\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-page-main-container\",\n      children: [events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-info-second\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-info-container\",\n          onMouseEnter: () => setIsHovered(true),\n          onMouseLeave: () => setIsHovered(false),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-image-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"event-image\",\n              src: event.image_link,\n              alt: \"Event Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), isHovered && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"add-to-cart-button\",\n              onClick: () => console.log('Added to Cart'),\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faShoppingCart\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this), \" Add to Cart\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-text-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"event-info\",\n              children: [\"Location: \", event.location]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"event-info\",\n              children: [\"Date: \", event.event_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"event-info\",\n              children: [\"Concert Name: \", event.event_name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, event.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)), isFormVisible && /*#__PURE__*/_jsxDEV(EventForm, {\n        addEvent: handleAddEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(EventPage, \"vFSyqkVb3xa3PXGdQt12mtCpkXQ=\");\n_c = EventPage;\nexport default EventPage;\nvar _c;\n$RefreshReg$(_c, \"EventPage\");","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","faSearch","faShoppingCart","Nav","EventForm","jsxDEV","_jsxDEV","EventPage","addToCart","_s","selectedDate","setSelectedDate","futureDates","setFutureDates","isHovered","setIsHovered","isFormVisible","setIsFormVisible","events","setEvents","fetchEvents","response","fetch","data","json","error","console","message","handleAddEvent","eventData","method","headers","body","JSON","stringify","result","success","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","event","onMouseEnter","onMouseLeave","src","image_link","alt","onClick","icon","location","event_date","event_name","id","addEvent","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/EVENT-PAGE/noliktava/src/EventPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/EventPage.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faShoppingCart } from '@fortawesome/free-solid-svg-icons';\nimport Nav from './Nav';\nimport EventForm from './EventForm';\n\nconst EventPage = ({ addToCart }) => {\n  const [selectedDate, setSelectedDate] = useState('');\n  const [futureDates, setFutureDates] = useState([]);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [events, setEvents] = useState([]); // State for storing dynamic events\n\n  // Use useEffect to fetch dynamic events when the component mounts\n  useEffect(() => {\n    // Fetch events from your API or database here\n    // Example: fetchEvents();\n  }, []);\n\n  const fetchEvents = async () => {\n    try {\n      const response = await fetch('YOUR_API_ENDPOINT_FOR_EVENTS');\n      const data = await response.json();\n      setEvents(data); // Update the events state with fetched data\n    } catch (error) {\n      console.error('Error fetching events:', error.message);\n    }\n  };\n\n  const handleAddEvent = async (eventData) => {\n    try {\n      // Make API call to add the new event\n      const response = await fetch('http://localhost:8888/api/eventApi.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(eventData),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        console.log('Event added successfully');\n        // Fetch the updated list of events after adding a new event\n        fetchEvents();\n      } else {\n        console.error('Error adding event:', result.message);\n      }\n    } catch (error) {\n      console.error('Error adding event:', error.message);\n    } finally {\n      setIsFormVisible(false); // Close the form after submission\n    }\n  };\n\n  return (\n    <div>\n      <Nav />\n      <div className=\"event-page-main-container\">\n        {/* Rest of your code remains the same */}\n        {/* You can map through the events and display them dynamically */}\n        {events.map((event) => (\n          <div key={event.id} className=\"event-info-second\">\n            <div\n              className=\"event-info-container\"\n              onMouseEnter={() => setIsHovered(true)}\n              onMouseLeave={() => setIsHovered(false)}\n            >\n              <div className=\"event-image-container\">\n                <img className=\"event-image\" src={event.image_link} alt=\"Event Image\" />\n                {isHovered && (\n                  <button className=\"add-to-cart-button\" onClick={() => console.log('Added to Cart')}>\n                    <FontAwesomeIcon icon={faShoppingCart} /> Add to Cart\n                  </button>\n                )}\n              </div>\n              <div className=\"event-text-container\">\n                <p className=\"event-info\">Location: {event.location}</p>\n                <p className=\"event-info\">Date: {event.event_date}</p>\n                <p className=\"event-info\">Concert Name: {event.event_name}</p>\n                {/* Add more event details as needed */}\n              </div>\n            </div>\n          </div>\n        ))}\n\n        {isFormVisible && <EventForm addEvent={handleAddEvent} />}\n      </div>\n    </div>\n  );\n};\n\nexport default EventPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}