{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krist\\\\OneDrive\\\\Desktop\\\\noliktava\\\\src\\\\AvgRating.jsx\",\n  _s = $RefreshSig$();\n// AvgRating.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport Nav from './Nav';\nimport CommentList from './CommentList'; // You'll need to create a CommentList component\nimport AverageRating from './AverageRating'; // You'll need to create an AverageRating component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AvgRating = () => {\n  _s();\n  // Sample event data (replace this with your actual data fetching logic)\n  const [eventData, setEventData] = useState({\n    eventName: 'Sample Event',\n    averageRating: 4.5,\n    comments: [{\n      userId: 1,\n      username: 'User1',\n      comment: 'Great event!',\n      rating: 5\n    }, {\n      userId: 2,\n      username: 'User2',\n      comment: 'Enjoyed it!',\n      rating: 4\n    }\n    // Add more comments as needed\n    ]\n  });\n  useEffect(() => {\n    // Fetch event data from your API\n    // Replace this with your actual data fetching logic\n    // For simplicity, I'm using a static sample data\n    // You can replace it with an API call or state management logic\n    // to fetch the event data based on the eventId or any other parameter\n    // that identifies the specific event you want to display\n    // Example: fetchDataForEvent(eventId);\n  }, []); // Add any dependencies that should trigger a re-fetch\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: eventData.eventName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AverageRating, {\n      rating: eventData.averageRating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentList, {\n      comments: eventData.comments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(AvgRating, \"Spf0u/X5oYUQ9FPrzbLo38jtLC8=\");\n_c = AvgRating;\nexport default AvgRating;\nvar _c;\n$RefreshReg$(_c, \"AvgRating\");","map":{"version":3,"names":["React","useState","useEffect","Nav","CommentList","AverageRating","jsxDEV","_jsxDEV","AvgRating","_s","eventData","setEventData","eventName","averageRating","comments","userId","username","comment","rating","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/krist/OneDrive/Desktop/noliktava/src/AvgRating.jsx"],"sourcesContent":["// AvgRating.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Nav from './Nav';\r\nimport CommentList from './CommentList'; // You'll need to create a CommentList component\r\nimport AverageRating from './AverageRating'; // You'll need to create an AverageRating component\r\n\r\nconst AvgRating = () => {\r\n  // Sample event data (replace this with your actual data fetching logic)\r\n  const [eventData, setEventData] = useState({\r\n    eventName: 'Sample Event',\r\n    averageRating: 4.5,\r\n    comments: [\r\n      { userId: 1, username: 'User1', comment: 'Great event!', rating: 5 },\r\n      { userId: 2, username: 'User2', comment: 'Enjoyed it!', rating: 4 },\r\n      // Add more comments as needed\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Fetch event data from your API\r\n    // Replace this with your actual data fetching logic\r\n    // For simplicity, I'm using a static sample data\r\n    // You can replace it with an API call or state management logic\r\n    // to fetch the event data based on the eventId or any other parameter\r\n    // that identifies the specific event you want to display\r\n    // Example: fetchDataForEvent(eventId);\r\n  }, []); // Add any dependencies that should trigger a re-fetch\r\n\r\n  return (\r\n    <div>\r\n      <Nav />\r\n      <h1>{eventData.eventName}</h1>\r\n      <AverageRating rating={eventData.averageRating} />\r\n      <CommentList comments={eventData.comments} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AvgRating;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AACzC,OAAOC,aAAa,MAAM,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC;IACzCW,SAAS,EAAE,cAAc;IACzBC,aAAa,EAAE,GAAG;IAClBC,QAAQ,EAAE,CACR;MAAEC,MAAM,EAAE,CAAC;MAAEC,QAAQ,EAAE,OAAO;MAAEC,OAAO,EAAE,cAAc;MAAEC,MAAM,EAAE;IAAE,CAAC,EACpE;MAAEH,MAAM,EAAE,CAAC;MAAEC,QAAQ,EAAE,OAAO;MAAEC,OAAO,EAAE,aAAa;MAAEC,MAAM,EAAE;IAAE;IAClE;IAAA;EAEJ,CAAC,CAAC;EAEFhB,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEK,OAAA;IAAAY,QAAA,gBACEZ,OAAA,CAACJ,GAAG;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACPhB,OAAA;MAAAY,QAAA,EAAKT,SAAS,CAACE;IAAS;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC9BhB,OAAA,CAACF,aAAa;MAACa,MAAM,EAAER,SAAS,CAACG;IAAc;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDhB,OAAA,CAACH,WAAW;MAACU,QAAQ,EAAEJ,SAAS,CAACI;IAAS;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV,CAAC;AAACd,EAAA,CA9BID,SAAS;AAAAgB,EAAA,GAAThB,SAAS;AAgCf,eAAeA,SAAS;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}