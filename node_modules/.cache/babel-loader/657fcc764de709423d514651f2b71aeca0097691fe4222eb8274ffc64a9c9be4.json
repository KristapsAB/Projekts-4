{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/EVENT-PAGE/noliktava/src/UserContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nconst UserProvider = ({\n  children\n}) => {\n  _s();\n  const [authStatus, setAuthStatus] = useState(false);\n  const [userData, setUserData] = useState(null);\n  useEffect(() => {\n    // Check if user is authenticated based on your logic\n    // For example, you can check if there is a token in localStorage\n    const isAuthenticated = localStorage.getItem('token') !== null;\n    setAuthStatus(isAuthenticated);\n\n    // If authenticated, fetch user data from the server and update context\n    if (isAuthenticated) {\n      // You can fetch user data here\n      // For now, I'll just set a sample user\n      setUserData({\n        userId: 1,\n        username: 'admin',\n        role: 'Admin'\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      authStatus,\n      setAuthStatus,\n      userData,\n      setUserData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"QF3vNW4GSrRMtVvW67uJsmdbztc=\");\n_c = UserProvider;\nexport { UserContext, UserProvider };\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","navigate","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","authStatus","setAuthStatus","userData","setUserData","isAuthenticated","localStorage","getItem","userId","username","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/EVENT-PAGE/noliktava/src/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { navigate } from 'react-router-dom';\n\nconst UserContext = createContext();\n\nconst UserProvider = ({ children }) => {\n  const [authStatus, setAuthStatus] = useState(false);\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    // Check if user is authenticated based on your logic\n    // For example, you can check if there is a token in localStorage\n    const isAuthenticated = localStorage.getItem('token') !== null;\n\n    setAuthStatus(isAuthenticated);\n\n    // If authenticated, fetch user data from the server and update context\n    if (isAuthenticated) {\n      // You can fetch user data here\n      // For now, I'll just set a sample user\n      setUserData({\n        userId: 1,\n        username: 'admin',\n        role: 'Admin',\n      });\n    }\n  }, []);\n\n  return (\n    <UserContext.Provider value={{ authStatus, setAuthStatus, userData, setUserData }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport { UserContext, UserProvider };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMY,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI;IAE9DL,aAAa,CAACG,eAAe,CAAC;;IAE9B;IACA,IAAIA,eAAe,EAAE;MACnB;MACA;MACAD,WAAW,CAAC;QACVI,MAAM,EAAE,CAAC;QACTC,QAAQ,EAAE,OAAO;QACjBC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEd,OAAA,CAACC,WAAW,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEX,UAAU;MAAEC,aAAa;MAAEC,QAAQ;MAAEC;IAAY,CAAE;IAAAL,QAAA,EAC/EA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAChB,EAAA,CA5BIF,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AA8BlB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}